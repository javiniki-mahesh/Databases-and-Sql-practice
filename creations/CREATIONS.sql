/* CREATION OF A DATABASE */
CREATE DATABASE DB1

/* USING DATABASE */
USE DB1
--DROP DATABASE DB1
--BACKUP DATABASE DB1 TO DISK = 'D:\\placement traning SQL'

/* CREATION OF A TABLE */
CREATE TABLE TB1
(NAME VARCHAR(22),
ID INT,
);

/* INSERTING VALUES INTO TABLE */
INSERT INTO TB1 VALUES('MAHESH',1)
INSERT INTO TB1 VALUES('SURESH',2)

/* RETRIEVING DATA FROM THE TABLE */
SELECT * FROM TB1

/* ADDING A NEW COLUMN FOR THE EXISTING TABLE */
ALTER TABLE TB1
ADD DEPTID INT

/* RETRIEVING DATA FROM THE TABLE */
SELECT * FROM TB1

/* CHANGING THE DATA TYPE OF A COLUMN IN THE TABLE */
ALTER TABLE TB1
ALTER COLUMN DEPTID VARCHAR(33)

/* RETRIEVING DATA FROM THE TABLE */
SELECT * FROM TB1

/* DROPING THE COLUMN FROM THE TABLE */
ALTER TABLE TB1
DROP COLUMN DEPTID;

/* RETRIEVING DATA FROM THE TABLE */
SELECT * FROM TB1

							/*		CONSTRAINTS			*/
/* NOT NULL WHILE CREATING OF A TABLE  */
CREATE TABLE NOTNULL
(
NAME VARCHAR(33) NOT NULL,
AGE INT
);

/* to drop the table */
--DROP TABLE NOTNULL

INSERT INTO NOTNULL VALUES('MAHA', 20)

SELECT * FROM NOTNULL

/* NOT NULL AFTER CREATING TABLE -> ALTER */

ALTER TABLE NOTNULL
ALTER COLUMN AGE INT NOT NULL

/* YOU CAN NOT ADD A NEW COLUMN THAT IS NOT NULL BECAUSE PREVIOUS ENTRIES WILL BECAME NULL */

/*		UNIQUE		*/
CREATE TABLE UNIQUE_TABLE
(
ID INT NOT NULL UNIQUE,
FN VARCHAR(44) NOT NULL,
DOB DATE UNIQUE
);

INSERT INTO UNIQUE_TABLE VALUES(2,'MAHA','11/06/2013')
INSERT INTO UNIQUE_TABLE VALUES(3,'MAHA',NULL)
INSERT INTO UNIQUE_TABLE VALUES(4,'MAHA','11/06/2023')

SELECT * FROM UNIQUE_TABLE

/* To define a UNIQUE constraint on multiple columns */

CREATE TABLE UNIQUE_TABLE2
(
ID INT,
FNAME VARCHAR(44),
CONSTRAINT UC_PERSON UNIQUE(ID,FNAME)
);

--DROP TABLE UNIQUE_TABLE2


INSERT INTO UNIQUE_TABLE VALUES(1,'MAHESH', '12/06/2003')
INSERT INTO UNIQUE_TABLE2 VALUES(1,'MA')
INSERT INTO UNIQUE_TABLE2 VALUES(2,'MA')
-- INDIVIDUALLY WE CAN HAVE DUPLICATES BUT COMBINATION SHOULD NOT ALLOWED

SELECT * FROM UNIQUE_TABLE2
					-- PRIMARY KEY
CREATE TABLE PRIMARY_
(
ID INT PRIMARY KEY,
NAME VARCHAR(55) NOT NULL
);



CREATE TABLE PRIMARY_2
(
ID INT NOT NULL,
NAME VARCHAR(22)
CONSTRAINT PRIME PRIMARY KEY (ID,NAME)
);

CREATE TABLE PRIMARY_3
(
ID INT,
NAME VARCHAR(22));


--ALTER TABLE PRIMARY_3
--ADD CONSTRAINT PRIMARY_KEY PRIMARY KEY (ID)

/*THE ABOVE FAILS TO ADD PRIMARY_KEY CONSTRAINT BECAUSE IT IS ALLOWING NULL VALUES FOR THAT*/
ALTER TABLE PRIMARY_3
	ALTER COLUMN ID INT NOT NULL

ALTER TABLE PRIMARY_3
	ADD CONSTRAINT PRIMARY_KEY PRIMARY KEY(ID)



--DROP TABLE PRIMARY_2

--ALTER TABLE PRIMARY_2
--ADD ID2 INT PRIMARY KEY

-- WE CAN NOT HAVE MORE THAN ONE PRIMARY KEYS IN A TABLE


SELECT * FROM PRIMARY_2

ALTER TABLE PRIMARY_2
DROP PRIME

ALTER TABLE PRIMARY_2
ADD ID2 INT PRIMARY KEY

--ALTER TABLE PRIMARY_
--DROP COLUMN ID

-- YOU CAN NOT DIRECTLY REMOVE A COLUMNS WHICH IS HAVING PRIMARY KEY
-- BUT YOU CAN REMOVE THE CONSTRAINT

ALTER TABLE PRIMARY_
DROP CONSTRAINT [PK__PRIMARY___3214EC275E70000B] 
-- EACH TIME NEW KEY WILL BE GENERATED
-- NOT A GOOD APPROACH OF DEFINING CONSTRAINTS LIKE THIS 
-- SO BETTER DEFINE THE CONSTRAINTS AS CONSTRAINTS SO WE USE THAT NAME IN FUTURE

SELECT * FROM PRIMARY_
-- THEN YOU CAN DROP THE COLUMN

ALTER TABLE PRIMARY_
DROP COLUMN ID

SELECT * FROM PRIMARY_

		/*			FOREIGN KEY		*/
/*		CREATING TABLE		*/
CREATE TABLE BASE
(
	ID INT PRIMARY KEY,
	NAME VARCHAR(44) NOT NULL
);

INSERT INTO BASE VALUES(2,'A')

CREATE TABLE FOREIGNT(
ID1 INT PRIMARY KEY,
ID INT FOREIGN KEY REFERENCES BASE(ID));

INSERT INTO FOREIGNT VALUES(2,2)

SELECT * FROM BASE
SELECT * FROM FOREIGNT

SELECT ID1 FROM FOREIGNT,BASE WHERE BASE.ID = FOREIGNT.ID

/*		ALTER FOREIGN KEY		*/
ALTER TABLE BASE
ADD NEW_ID INT FOREIGN KEY REFERENCES FOREIGNT(ID1);
-- REFERENCING FOREIGNT FROM BASE TABLE

SELECT * FROM BASE
SELECT * FROM FOREIGNT

CREATE TABLE BASE1(
ID2 INT PRIMARY KEY,
CONSTRAINT FK  FOREIGN KEY(ID2) REFERENCES BASE(ID));

/*			DROP FOREIGN KEY		*/
ALTER TABLE BASE1
DROP FK

/* ALTER TABLE BASE
DROP CONSTRAINT NEW_ID */

-- AS PREVIOUSLY MENTIONED WE CAN NOT DROP COLUMN WHICH IS HAVING A CONSTRAINT

/*			CHECK		*/
/* The CHECK constraint is used to limit the value range that can be placed in a column. */

CREATE TABLE CHECKT
(
	ID INT PRIMARY KEY,
	NAME VARCHAR(44),
	AGE INT CHECK(AGE>=18)
);

SELECT * FROM CHECKT

INSERT INTO CHECKT VALUES(1,'M',19);

-- INSERT INTO CHECKT VALUES(2,'M',12); 
--The INSERT statement conflicted with the CHECK constraint

--NAME TO CONSTRAINT
CREATE TABLE CKECKT1(
	ID INT PRIMARY KEY,
	NAME VARCHAR(44),
	AGE INT,
	CONSTRAINT CK CHECK(AGE>=18)
);

-- INSERT INTO CKECKT1 VALUES(2,'M',12); 
--The INSERT statement conflicted with the CHECK constraint

--MULTIPLE

CREATE TABLE CHECK2(
NAME VARCHAR(5),
AGE INT,
CONSTRAINT CK1 CHECK(AGE > 18 AND NAME = 'M'));

INSERT INTO CHECK2 VALUES('M',19)

--INSERT INTO CHECK2 VALUES('D',122)
--The INSERT statement conflicted with the CHECK constrain

--INSERT INTO CHECK2 VALUES('M',12)
--The INSERT statement conflicted with the CHECK constrain

INSERT INTO CHECK2 VALUES('M',22)

SELECT * FROM CHECK2
--BOTH SHOULD SATISFY

--ALTER
SELECT * FROM CHECKT

ALTER TABLE CHECKT
ADD CONSTRAINT CK2 CHECK(NAME = 'M')

ALTER TABLE CHECKT
ADD CHECK (ID<18)

-- ALL CONSTRAINTS WILL BE UPDATED
--DROPING

ALTER TABLE CHECKT
DROP  CK2

/*		DEFAULT		*/
/* The DEFAULT constraint is used to set a default value for a column. */

-- CREATION

CREATE TABLE DEFAULTT(
ID INT,
NAME VARCHAR(33),
AGE INT DEFAULT 18
);

INSERT INTO DEFAULTT (ID,NAME) VALUES(1,'M')

SELECT * FROM DEFAULTT

CREATE TABLE DEFAULTT2(
ID INT,
AGE DATE DEFAULT GETDATE()
)

-- TODAYS DATE WILL BE GENERATED

INSERT INTO DEFAULTT2 (ID) VALUES (2)

SELECT * FROM DEFAULTT2

SELECT * FROM DEFAULTT

--SQL DEFAULT on ALTER TABLE

ALTER TABLE DEFAULTT
ADD CONSTRAINT DEF  DEFAULT 'MAHESH' FOR NAME

INSERT INTO DEFAULTT (ID,AGE) VALUES(2,34)
-- EVEN I AM NOT GIVING MAHESH IT WILL AUTOMATICALLY TOOK MAHESH
SELECT * FROM DEFAULTT

INSERT INTO DEFAULTT  VALUES(2, 'SURESH',34)
-- IF I GIVE A VALUE THAT WILL BE TAKEN
SELECT * FROM DEFAULTT


-- DROP
ALTER TABLE DEFAULTT
DROP DEF


/* AUTO INCREMENT  */
CREATE TABLE INCREMENT
(
ID INT IDENTITY(1,10) PRIMARY KEY,
NAME VARCHAR(33)
)


/* EACH INSERTION IDENTITY WILL INCREMENT IT BY 10 AS IT IS MENTIONED 10 
AND STARTS WITH 1 */


INSERT INTO INCREMENT (NAME) VALUES ('MA')
INSERT INTO INCREMENT (NAME) VALUES ('HE')
INSERT INTO INCREMENT (NAME) VALUES ('SH')

-- INSERT INTO INCREMENT  VALUES (5,'MA')

-- WE CAN NOT EXPLICITY ADD A VALUE FOR INCREMENTING COLUMNS
-- IF WE WANT TO INSERT IN THE ROW WE WILL GET ERROR

SELECT * FROM INCREMENT

CREATE TABLE INCREMENT2
(
ID INT IDENTITY(1,2),
NAME VARCHAR(22)
)

-- IT WORKS EVEN IF IT IS NOT A PRIMARY KEY

INSERT INTO INCREMENT2 (NAME) VALUES ('MA')
INSERT INTO INCREMENT2 (NAME) VALUES ('HE')
INSERT INTO INCREMENT2 (NAME) VALUES ('SH')
			
SELECT * FROM INCREMENT2

/*		DATES		*/
CREATE TABLE DATES
(
DATE1 DATE ,  
DATE2 DATETIME,
DATE3 SMALLDATETIME,
DATE4 TIMESTAMP 
);

INSERT INTO DATES (DATE1) VALUES ('11-06-2003')

INSERT INTO DATES (DATE2) VALUES ('11-06-2003 11:02:11')
INSERT INTO DATES (DATE3) VALUES ('11-06-2003 11:02:11')
INSERT INTO DATES (DATE4) VALUES (NULL)
INSERT INTO DATES (DATE2) VALUES ('11-06-0')


SELECT * FROM DATES


/*		view		*/
SELECT * FROM TB1
	-- CREATING A VIEW

CREATE VIEW NAMES
AS
SELECT NAME FROM TB1;

SELECT * FROM NAMES


CREATE VIEW IDS AS
SELECT ID FROM TB1

SELECT * FROM IDS

--DROPING
DROP VIEW NAMES 
DROP VIEW IDS



